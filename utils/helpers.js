const statusMessages = {
    "1": "‚úÖ Th√†nh c√¥ng",
    "2": "‚ö†Ô∏è Sai m·ªánh gi√°",
    "3": "‚ùå Th·∫ª l·ªói",
    "4": "üõ† B·∫£o tr√¨",
    "99": "‚è≥ Ch·ªù x·ª≠ l√Ω",
    "100": "üì© G·ª≠i th·∫ª th·∫•t b·∫°i",
  };
  
  exports.formatUptime = (seconds) => {
    const days = Math.floor(seconds / (24 * 3600));
    const hours = Math.floor((seconds % (24 * 3600)) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${days}d ${hours}h ${minutes}m`;
  };
  
  exports.hasDataChanged = (newData, previousData) => {
    const keys = ['db1', 'db2', 'db3'];
    return keys.some(key => 
      JSON.stringify(newData[key]) !== JSON.stringify(previousData[key])
    );
  };
  
  exports.generateTextData = (data) => {
    if (!data) return null;
    
    return ['db1', 'db2', 'db3', 'db4']
      .map((tableKey, index) => {
        if (!data[tableKey]?.length) return '';
        
        const shop = [
          "bloxmmo ü§ì-atm",
          "khocloud üçÄ-atm", 
          "Khocloud üò∫", 
          "bloxmmo ü§ì"
        ][index] || 'Unknown Shop';
  
        return data[tableKey]
          .map((row, idx) => formatRow(row, idx, shop, tableKey))
          .join('\n');
      })
      .filter(Boolean)
      .join('\n\n');
  };
  
  function formatRow(row, idx, shop, tableKey) {
    const isATM = ['db1', 'db2'].includes(tableKey);
    
    return isATM 
      ? `#${idx + 1}
  M√£ GD: ${row.reference_number}
  Ng√†y GD: ${row.transaction_date}
  S·ªë ti·ªÅn: ${row.amount_in} VND
  Ng∆∞·ªùi d√πng: ${row.code}
  S·ªë TK: ${row.sub_account}
  Web: ${shop}`
      : `#${idx + 1}
  M√£ GD: ${row.trans_id || row.code}
  Ng√†y GD: ${row.created_at}
  Tr·∫°ng th√°i: ${statusMessages[row.status] || "üîç Kh√¥ng x√°c ƒë·ªãnh"}
  S·ªë ti·ªÅn: ${row.amount} VNƒê
  Serial: ${row.serial}
  Nh√† m·∫°ng: ${row.telco}
  Web: ${shop}`;
  }